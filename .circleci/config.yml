version: 2
jobs:
  dependencies:
    working_directory: ~/app
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
      - run:
          name: Node dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: ~/app
          paths:
            - node_modules

  linting:
    working_directory: ~/app
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Lint
          command: yarn lint && yarn flow

  unit_tests:
    working_directory: ~/app
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Jest
          command: yarn test:unit -i
          environment:
            TZ: Europe/Paris

  end2end_tests_ios_build:
    macos:
      xcode: "10.1.0"
    working_directory: ~/app

    steps:
      - checkout

      - attach_workspace:
          at: ~/app

      - restore_cache:
          key: detox-v2-{{ arch }}

      - run:
          name: Detox framework
          command: |
            if yarn global list | grep 'detox-cli' > /dev/null; then
              echo "Detox-cli already installed."
              ln -s /usr/local/bin/detox $(yarn global dir)/node_modules/.bin/detox
            else
              echo "Detox-cli not installed."
              yarn global add detox-cli
            fi
            detox build-framework-cache

      - save_cache:
          key: detox-v2-{{ arch }}
          paths:
            - ~/Library/Detox/ios
            - $(yarn global dir)

      - restore_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}

      - run:
          name: Pods dependencies
          command: yarn cocoapods:install

      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ~/Library/Caches/CocoaPods
            - ios/Pods

      - run:
          name: Build
          command: yarn test:end2end:ios:release:build

      - persist_to_workspace:
          root: ~/app
          paths:
            - ios/build/Build/Products/Release-iphonesimulator/Coorpacademy.app

  end2end_tests_ios_run:
    macos:
      xcode: "10.1.0"
    working_directory: ~/app

    steps:
      - checkout

      - attach_workspace:
          at: ~/app

      - restore_cache:
          key: detox-v2-{{ arch }}

      - run:
          name: Detox framework
          command: |
            if yarn global list | grep 'detox-cli' > /dev/null; then
              echo "Detox-cli already installed."
              ln -s /usr/local/bin/detox $(yarn global dir)/node_modules/.bin/detox
            else
              echo "Detox-cli not installed."
              yarn global add detox-cli
            fi
            detox build-framework-cache

      - save_cache:
          key: detox-v2-{{ arch }}
          paths:
            - ~/Library/Detox/ios
            - $(yarn global dir)

      - restore_cache:
          key: brew-v2-ios-{{ arch }}

      - run:
          name: Brew dependencies
          command: |
            if brew ls --versions applesimutils > /dev/null; then
              echo "Applesimutils already installed."
              brew link applesimutils
            else
              echo "Applesimutils not installed."
              brew tap wix/brew
              brew install applesimutils
            fi

      - save_cache:
          key: brew-v2-ios-{{ arch }}
          paths:
            - ~/Library/Caches/Homebrew
            - /usr/local/Cellar

      - run:
          name: Tests
          command: yarn test:end2end:ios:release:test

  build_ios:
    macos:
      xcode: "10.1.0"
    working_directory: ~/app

    steps:
      - checkout

      - attach_workspace:
          at: ~/app

      - restore_cache:
          key: gems-v1-ios-{{ arch }}

      - run:
          name: Gems dependencies
          command: cd ios && bundle install

      - save_cache:
          key: gems-v1-ios-{{ arch }}
          paths:
            - ios/gems

      - restore_cache:
          key: pods-v3-{{ checksum "ios/Podfile.lock" }}-{{ arch }}

      - run:
          name: Pods dependencies
          command: yarn cocoapods:install

      - save_cache:
          key: pods-v3-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ~/Library/Caches/CocoaPods
            - ios/Pods

      - run:
          name: Build
          command: cd ios && bundle exec fastlane adhoc --verbose
          environment:
            RCT_NO_LAUNCH_PACKAGER: 1

      - store_artifacts:
          path: ios/release
          destination: artifacts

      - persist_to_workspace:
          root: ~/app
          paths:
            - ios/release

  build_android:
    working_directory: ~/app
    docker:
      - image: circleci/android:api-28-node
    steps:
      - checkout
      - attach_workspace:
          at: ~/app

      - restore_cache:
          key: gems-v1-android-{{ arch }}

      - run:
          name: Gems dependencies
          command: cd android && bundle install

      - save_cache:
          key: gems-v1-android-{{ arch }}
          paths:
            - android/gems

      - restore_cache:
          key: gradle-v1-{{ checksum "android/app/gradle/dependency-locks/debugCompileClasspath.lockfile" }}-{{ arch }}

      - run:
          name: SDK licenses
          # Keep "|| true" because yes command handles a 141 exit code
          command: yes | sdkmanager "build-tools;28.0.3" "platforms;android-28" || true

      - run:
          name: Gradle dependencies
          command: cd android && ./gradlew androidDependencies
          environment:
            ANDROID_HOME: /opt/android/sdk

      - save_cache:
          key: gradle-v1-{{ checksum "android/app/gradle/dependency-locks/debugCompileClasspath.lockfile" }}-{{ arch }}
          paths:
            - ~/.gradle/caches

      - run:
          name: Pull certificate
          command: yarn pull:certificate:android

      - run:
          name: Build
          command: cd android && bundle exec fastlane adhoc --verbose
          environment:
            RCT_NO_LAUNCH_PACKAGER: 1

      - store_artifacts:
          path: android/app/build/outputs/apk/release
          destination: artifacts

      - persist_to_workspace:
          root: ~/app
          paths:
            - android/app/build/outputs/apk/release

  deploy_prepare:
    working_directory: ~/app
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Cloning internal store
          command: git clone https://heroku:${HEROKU_API_KEY}@git.heroku.com/${HEROKU_APP_NAME}.git store
      - persist_to_workspace:
          root: ~/app
          paths:
            - store

  deploy_android:
    working_directory: ~/app
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Fetching branch
          command: |
            cd store
            git pull origin master
      - run:
          name: Deploy to internal store
          command: |
            [ -z "${CIRCLE_PULL_REQUEST}" ] && BRANCH_NAME="${CIRCLE_BRANCH}" || BRANCH_NAME="PR-${CIRCLE_PULL_REQUEST##*/}"
            echo "Deploying on ${BRANCH_NAME}"
            mkdir -p "store/${BRANCH_NAME}"
            cd "store/${BRANCH_NAME}"
            echo "{\"date\": \"$(TZ=Europe/Paris date '+%d/%m/%Y %H:%M:%S')\"}" > build-android.json
            cp ../../android/app/build/outputs/apk/release/Coorpacademy-release.apk Coorpacademy.apk
            git config --global user.email mobile@coorpacademy.com
            git config --global user.name "Mobile app CI"
            git add .
            git commit -m "Automatic Android build on ${BRANCH_NAME}"
            git push https://heroku:${HEROKU_API_KEY}@git.heroku.com/${HEROKU_APP_NAME}.git master
      - persist_to_workspace:
          root: ~/app
          paths:
            - store

  deploy_ios:
    working_directory: ~/app
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Going to persisted folder
          command: cd store
      - run:
          name: Fetching branch
          command: |
            cd store
            git pull origin master
      - run:
          name: Deploy to internal store
          command: |
            [ -z "${CIRCLE_PULL_REQUEST}" ] && BRANCH_NAME="${CIRCLE_BRANCH}" || BRANCH_NAME="PR-${CIRCLE_PULL_REQUEST##*/}"
            echo "Deploying on ${BRANCH_NAME}"
            mkdir -p "store/${BRANCH_NAME}"
            cd "store/${BRANCH_NAME}"
            echo "{\"date\": \"$(TZ=Europe/Paris date '+%d/%m/%Y %H:%M:%S')\"}" > build-ios.json
            cp ../../ios/release/Coorpacademy.ipa Coorpacademy.ipa
            cp ../../.circleci/adhoc-template.plist Coorpacademy.plist
            sed -i -e "s@{DOMAIN}@${DOMAIN}@g" Coorpacademy.plist
            sed -i -e "s@{PATH}@${BRANCH_NAME}@g" Coorpacademy.plist
            git config --global user.email mobile@coorpacademy.com
            git config --global user.name "Mobile app CI"
            git add .
            git commit -m "Automatic iOS build on ${BRANCH_NAME}"
            git push https://heroku:${HEROKU_API_KEY}@git.heroku.com/${HEROKU_APP_NAME}.git master
          environment:
            DOMAIN: https://mobile-internal-store.herokuapp.com
      - persist_to_workspace:
          root: ~/app
          paths:
            - store

workflows:
  version: 2
  tests-build-deploy:
    jobs:
      - dependencies
      - linting:
         requires:
           - dependencies
      - unit_tests:
         requires:
           - dependencies
      - end2end_tests_ios_build:
         requires:
           - dependencies
      - end2end_tests_ios_run:
         requires:
           - end2end_tests_ios_build
      - build_android:
         requires:
           - dependencies
      - build_ios:
         requires:
           - dependencies
      - deploy_prepare:
         requires:
           - dependencies
      - deploy_android:
         requires:
           - deploy_prepare
           - build_android
      - deploy_ios:
         requires:
           - deploy_prepare
           - build_ios
           # to prevent push fails (and build android is faster)
           - deploy_android
