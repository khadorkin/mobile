apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Load configs from config folder for each build type
 */
task loadConfig {
    List<String> buildTypes = new ArrayList<String>();
    buildTypes.add("debug");
    buildTypes.add("release");
    for (String buildType : buildTypes) {
        String configFilename = "config/${buildType}.properties"
        File configFile = rootProject.file(configFilename)
        Properties config = new Properties()
        config.load(new FileInputStream(configFile))
        project.ext.set("${buildType}Config", config)
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId releaseConfig['build.application_id']
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        versionCode 1
        versionName "1.1.57"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        // For Detox
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file("../../${System.env.KEYSTORE_FILE}")
            storePassword "${System.env.KEYSTORE_PASSWORD}"
            keyAlias "${System.env.KEYSTORE_ALIAS}"
            keyPassword "${System.env.KEYSTORE_ALIAS_PASSWORD}"
        }
    }
    buildTypes {
        debug {
            setProperty("archivesBaseName", debugConfig['build.output_name'])
            debugConfig.each { key, value ->
                if (key ==~ /^string.*/) {
                    resValue "string", key.replace('string.', ''), value
                }
                if (key ==~ /^color.*/) {
                    resValue "color", key.replace('color.', ''), value
                }
            }
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            setProperty("archivesBaseName", releaseConfig['build.output_name'])
            releaseConfig.each { key, value ->
                if (key ==~ /^string.*/) {
                    resValue "string", key.replace('string.', ''), value
                }
                if (key ==~ /^color.*/) {
                    resValue "color", key.replace('color.', ''), value
                }
            }
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-device-info')
    implementation project(':react-native-orientation-locker')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-camera');
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-pdf')
    implementation project(':react-native-orientation-locker')
    implementation project(':react-native-video')
    implementation project(':react-native-localization')
    implementation project(':react-native-svg')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-gesture-handler')
    // Firebase dependencies
    implementation project(':react-native-firebase')
    implementation 'com.google.android.gms:play-services-base:16.0.1'
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.android.support:multidex:1.0.2'
    // Google Tag Manager
    implementation 'com.google.android.gms:play-services-tagmanager:16.0.8'
    // React native
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    // For Detox
    androidTestImplementation(project(path: ":detox"))
    androidTestImplementation 'junit:junit:4.12+'
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}
dependencyLocking {
    lockAllConfigurations()
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
