# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.122.0"

default_platform :android

platform :android do
  before_all do |lane|
    if "#{lane}" == "adhoc"
      ENV["REACT_NATIVE_BUILD_TYPE"] = "adhoc"
    elsif "#{lane}" == "beta"
      ENV["REACT_NATIVE_BUILD_TYPE"] = "distribution"
    end

    puts "Build type: #{ENV["REACT_NATIVE_BUILD_TYPE"]}"

    yarn(step_name: 'update_version', command: 'update:version', project_root: '..')
    yarn(step_name: 'generate_android_bundle', command: 'generate:bundle:android', project_root: '..')
  end

  desc "build an adhoc release for internal store"
  lane :adhoc do
    gradle(
      task: "assemble",
      build_type: "Release",
      # To avoid OOM (exit code 137) as we generated it before
      flags: "-x bundleReleaseJsAndAssets"
    )
  end

  desc "Submit a new Internal Build to Google Play "
  lane :beta do |options|
    version_code = fetch_version_code(
      endpoint: "api.coorpacademy.com/mobile/api/v1/build-number/#{:android}/increment",
      method: :post,
      secret_header: 'Api-Secret',
      secret_value: ENV['VERSION_API_SECRET']
    )
    increment_version_code(
      gradle_file_path: "app/build.gradle",
      version_code: version_code
    )
    gradle(
      task: "bundle",
      build_type: "Release",
      # To avoid OOM (exit code 137) as we generated it before
      flags: "-x bundleReleaseJsAndAssets"
    )
    supply(track: "internal")

    yarn(
      step_name: "notify_publication",
      command: "notify:publication",
      options: [
        ":iphone: Build number *#{version_code}* should be available in the store soon :rocket:",
        "good",
        "Publication of Android App Successful"
      ],
      project_root: '..'
    )
  end

  desc "Promote a build to the target step"
  lane :promoteTrack do |options|
    # supply init download metadata that are mandatory to promote
    `cd .. && fastlane supply init json_key:#{ENV['SUPPLY_JSON_KEY']}`
    if options[:current] and options[:target]
      supplyOptions = {}
      supplyOptions[:track] = options[:current]
      supplyOptions[:track_promote_to] = options[:target]
      supplyOptions[:skip_upload_apk] = true
      supplyOptions[:skip_upload_metadata] = true
      supplyOptions[:skip_upload_images] = true
      supplyOptions[:skip_upload_screenshots] = true
      if options[:target] == "rollout"
        if options[:rollout]
          supplyOptions[:rollout] = options[:rollout]
        else
          UI.error "Please provide the rollout option to promote to rollout track!"
        end
      end

      supply(supplyOptions)
    else
      UI.error "Please provide the current and the target track as options!"
    end
  end

  desc "Return the highest version code between all play store tracks"
  lane :getHighestVersionCodeOnStore do
    highestVersionCode = []
    alpha = google_play_track_version_codes(track: 'alpha')
    unless alpha.nil? || alpha[0].nil?
      highestVersionCode.push(alpha[0])
    end
    beta = google_play_track_version_codes(track: 'beta')
    unless beta.nil? || beta[0].nil?
      highestVersionCode.push(beta[0])
    end
    production = google_play_track_version_codes()
    unless production.nil? || production[0].nil?
      highestVersionCode.push(production[0])
    end

    puts 'The highest version code retrieve on store is ' + highestVersionCode.max.to_s
  end
end
